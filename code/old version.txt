from openpyxl import load_workbook
import datetime
import re

def getCharByColumn(column=1):
    charColumn = "A"
    counter = 1  
    while(counter != column):
        counter += 1
        charColumn = chr(ord(charColumn) + 1)
    return charColumn

def getRange(range):
    arrayOfCoordinates = []
    [firstPart, lastPart] = [getCharByColumn(range[0]) + str(range[1]), getCharByColumn(range[2]) + str(range[3])]
    tmpFirstPart = firstPart
    tmpNumber = range[1]
    while(tmpFirstPart != lastPart):
        arrayOfCoordinates.append(tmpFirstPart)
        if (firstPart[0] != lastPart[0]):
            tmpFirstPart = chr(ord(tmpFirstPart[0]) + 1) + str(tmpNumber)
        if (tmpFirstPart[0] == lastPart[0] and tmpFirstPart != lastPart):
            arrayOfCoordinates.append(tmpFirstPart)
            tmpNumber += 1
            tmpFirstPart = firstPart[0] + str(tmpNumber)
    arrayOfCoordinates.append(tmpFirstPart) # append last coordinate of range
    return arrayOfCoordinates

def coordInRange(coord="", range=""):
    arrayOfCoordinates = getRange(range)
    return coord in arrayOfCoordinates

def main():
    days = ["понедельник", "вторник", "среда", "четверг", "пятница", "суббота"]
    schedule = {}
    workbook = load_workbook('rasp.xlsx')
    sheet = workbook.active
    week = {}
    sortedMergedCells = sheet.merged_cells.sorted()
    print("max_row=", sheet.max_row+1)
    print("max_col=", sheet.max_column+1)
    teacher = {}
    prevValue = None
    for row in range(1,sheet.max_row+1):
        for col in range(1,sheet.max_column+1):
            cell = sheet.cell(row, col)
            if (cell.value == None):
                continue
            if (isinstance(cell.value, str) and ("расписание" in cell.value.lower() or "семестр" in cell.value.lower())):
                continue
            if (isinstance(cell.value, str) and cell.value.lower() in days):
                for mergedCell in sortedMergedCells: 
                    if (coordInRange(coord = cell.coordinate, range = mergedCell.bounds)):
                        week[mergedCell.bounds] = cell.value # get dict of week with range coordinates
                        break
                continue
            if (col == 1): # branch of teacher
                for mergedCell in sortedMergedCells: 
                    if (coordInRange(coord = cell.coordinate, range = mergedCell.bounds)):
                        teacher = {"name": cell.value, "range": mergedCell.bounds}
                        # print("###################################") 
                        # print(teacher)
                        break
                continue
            if (row >= teacher.get("range")[1] and row <= teacher.get("range")[3]): # branch of lessons
                for day in week.keys():
                    newRange = [day[0], day[1], day[2], teacher.get("range")[3]]
                    if (coordInRange(coord = cell.coordinate, range = newRange)):
                        # print(week.get(day))
                        if (schedule.get(teacher.get("name")) == None):
                                schedule[teacher.get("name")] = {week.get(day): []}
                        try:
                            lessons = schedule[teacher.get("name")][week.get(day)]
                            valueSet = False
                            for lesson in lessons:
                                # if (lesson.get("time") == None):
                                #     print("in Time")
                                #     time = cell.value
                                #     if (isinstance(time, datetime.time)):
                                #         strTime = time.strftime("%H:%M")
                                #         lesson["time"] = strTime
                                #         valueSet = True
                                #         break
                                #     lesson["time"] = time
                                #     valueSet = True
                                #     break
                                if (lesson.get("nameOfLesson") == None):
                                    lesson["nameOfLesson"] = cell.value
                                    valueSet = True
                                    break
                                elif (col > newRange[0] and col < newRange[2] and re.search("\d{4}", str(prevValue)) != None):
                                    newName = lesson["nameOfLesson"] + " " + cell.value
                                    lesson["nameOfLesson"] = newName
                                    valueSet = True
                                    break
                                if (lesson.get("office") == None):
                                    lesson["office"] = cell.value
                                    valueSet = True
                                    break
                                if (lesson.get("groups") == None):
                                    lesson["groups"] = cell.value
                                    valueSet = True
                                    break
                                if (lesson.get("type") == None):
                                    lesson["type"] = cell.value
                                    valueSet = True
                                    break
                            if (valueSet == False):
                                time = cell.value
                                print("append Time")
                                if (isinstance(time, datetime.time)):
                                    strTime = time.strftime("%H:%M")
                                    lessons.append({"time": strTime})
                                else:
                                    lessons.append({"time": time})
                                # if (lessons["time"] != None and lessons["groups"] != None and lesson["office"] and lesson["nameOfLesson"] != None):
                                #     lesson["nameOfLesson"] = lesson["nameOfLesson"] + cell.value
                                #     break
                        except Exception as ex:
                            print("except")
                            print(ex)
                            time = cell.value
                            # print(time)
                            # print(isinstance(time, datetime.time))
                            if (isinstance(time, datetime.time)):
                                    strTime = time.strftime("%H:%M")
                                    # print({"time": strTime})
                                    schedule[teacher.get("name")][week.get(day)] = [{"time": strTime}]
                            else: 
                                schedule[teacher.get("name")][week.get(day)] = [{"time": time}]
                        break
                # print(cell.value)
            prevValue = cell.value
                
            # if (col == 3 or col == 4):
            #     
            #     if (group == None and obj.get(cell.value) == None):
            #         obj[cell.value] = {}
            #         group = cell.value
            #         parseStart = True
            #         continue
            # if(parseStart):
            #     if (col == 1):
            #         obj[group][cell.value] = {}
            #         day = cell.value
            #     elif(col == 2):
            #         if (re.search("\d*\.\d*", cell.value) == None):
            #             obj[group][day][cell.value] = ""
            #             para = cell.value
            #     else:
            #         obj[group][day][para]=cell.value
                
            # print(cell.value)
            # print("#################################")
    # print(week)
    print(schedule)
    print(week)
            # print(row, col)
    # print(obj)
    with open('test.txt', 'w', encoding='UTF-8') as f:
        f.write(str(schedule))
    # sorteds = sheet.merged_cells.sorted()
    # print(sorteds)
    # print(sheet.cell(4,2).value)
    # print(sheet.cell(4,3).value)
    # print(sheet.cell(4,4).value)

if __name__ == "__main__":
    main()